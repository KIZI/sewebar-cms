<?php

require_once dirname(__FILE__).'/../../../www/libraries/kbi/Integrators/LispMiner.php';

/**
 * Test class for Ontopia.
 * Generated by PHPUnit on 2011-02-14 at 09:38:20.
 */
class LispMinerTest extends PHPUnit_Framework_TestCase
{
	protected static $cfg = array(
		'url' => 'http://connect-dev.lmcloud.vse.cz/SewebarConnectNext',
		'admin' => array(
			'username' => 'admin',
			'password' => 'sewebar'
		),
		'params' => array(
			'martix' => 'Loans'
		)
	);

	/**
	 * @var LispMiner
	 */
	protected static $miner;

	/**
	 * @var string
	 */
	protected static $data;

	public static function setUpBeforeClass()
	{
		// Disable FirePHP
		KBIDebug::setEnabled(false);

		self::$data = dirname(__FILE__) . '/../../data';

		$cfg = self::$cfg;

		$tmp = new LispMiner($cfg);

		$minerId = $tmp->register(array(
			'metabase' => 'LM Barbora.mdb',
			'type' => 'AccessConnection'
		));

		$cfg['params']['miner_id'] = $minerId;

		self::$miner = new LispMiner($cfg);

		unset($tmp);
	}

	public static function tearDownAfterClass()
	{
		// Enable back FirePHP
		KBIDebug::setEnabled(true);

		// TODO: solve The process cannot access the file 'results_DD_20130701-10631.xml' because it is being used by another process.'
		// self::$object->unregister();
	}

	public function test_getMethod_shouldBePOST()
	{
	   $this->assertEquals('POST', self::$miner->getMethod());
	}

	public function test_register_withOldData()
	{
		$miner = new LispMiner(self::$cfg);

		$cfg = array(
			'server' => 'db-srv',
			'database' => 'test',
			'username' => 'db_user',
			'password' => 'secret1',
			'type' => 'MySQLConnection'
		);

		$result = $miner->register($cfg);

		$this->assertEquals(22, strlen($result), 'ID should 22 chars');

		return $result;
	}

	/**
	 * @depends test_register_withOldData
	 */
	public function test_unregister($minerId)
	{
		$miner = new LispMiner(self::$cfg);

		$result = $miner->unregister($minerId);

		$this->assertNotEmpty($result);
	}

	public function test_importDataDictionary()
	{
		$data = self::$data;
		$dd = file_get_contents("$data/connect/scenarios/ETreeMiner/Import3.xml");

		$result = self::$miner->importDataDictionary($dd);

		$this->assertContains(self::$miner->getMinerId(), $result, 'Message should contain miner ID.');
	}

	public function test_getDataDescription()
	{
		$result = self::$miner->getDataDescription();

		$this->assertNotEmpty($result, 'Data Description should not be empty.');
	}

	public function test_queryPost_startTask()
	{
		$data = self::$data;
		$query = file_get_contents("$data/connect/scenarios/ETreeMiner/ETReeMiner.Task52.xml");
        $options = array(
            'template' => 'ETreeMiner.Task.Template.PMML'
        );

		$result = self::$miner->queryPost($query, $options);

		$this->assertNotEmpty($result);

		return $result;
	}

	/**
	 * @depends test_queryPost_startTask
	 */
	public function test_queryPost_exportResults($r1)
	{
		$result = self::$miner->queryPost(null, array(
            'template' => 'ETreeMiner.Task.Template.PMML',
			'export' => '9741046ed676ec7470cb043db2881a094e36b554'
		));

		$this->assertXmlStringEqualsXmlString($r1, $result, 'Results should be the same (usually).');
		$this->assertNotEmpty($result);
	}

	public function test_cancelTask()
	{
		$taskName = '9741046ed676ec7470cb043db2881a094e36b554';
		$result = self::$miner->cancelTask($taskName);

		$this->assertContains("Task {$taskName} has been canceled.", $result);
	}

	public function test_test()
	{
		$result = self::$miner->test();

		$this->assertTrue($result, 'Miner should exist.');
	}

	// region SewebarKey

	public function test_registerUser()
	{
		$user = array(
			'username' => 'testUser',
			'password' => 'heslo'
		);

		$result = self::$miner->registerUser($user['username'], $user['password'], 'info@test.com');

		$this->assertNotEmpty($result);

		return $user;
	}

    /**
     * @depends test_registerUser
     */
    public function test_updateOtherUser($user)
    {
        $result = self::$miner->updateOtherUser(
            $user['username'],
            null,
            'heslo2',
            'test@example.com',
            'smtp@vse.cz',
            'http://vse.cz/index.php?code1=12345&code={code}');

        $this->assertNotEmpty($result);
    }

	/**
	 * @depends test_registerUser
	 */
	public function test_registerUserDatabase($user)
	{
		$database = array('name' => 'test_registerUserDatabase', 'db_password' => 'pwdDb');

		$result = self::$miner->registerUserDatabase(
			$user['username'],
			$user['password'],
			$database['name'],
			$database['db_password']
		);

		$this->assertNotEmpty($result);

		return array_merge($user, $database);
	}

	public function test_registerUserAndDatabase()
	{
		$seed = rand(0, 1000);

		$result = self::$miner->registerUserDatabase(
			"test_registerUser_{$seed}",
			'pwd',
			"test_registerUserDatabase_{$seed}",
			'pwdDb'
		);

		$this->assertNotEmpty($result);
	}

	/**
	 * @depends test_registerUserDatabase
	 */
	public function test_getDatabasePassword($database)
	{
		$result = self::$miner->getDatabasePassword(
			$database['username'],
			$database['password'],
			$database['name']
		);

		$this->assertNotEmpty($result);
		$this->assertEquals($database['db_password'], $result);
	}

	/**
	 * @depends test_registerUserDatabase
	 */
	public function test_unregisterUserDatabase($database)
	{
		$result = self::$miner->unregisterUserDatabase(
			$database['username'],
			$database['password'],
			$database['name']
		);

		$this->assertNotEmpty($result);
	}

	public function test_registerUserDatabase_forAnonymous()
	{
		$database = array('name' => 'test_registerUserDatabase_forAnonymous', 'password' => 'pwd');

		$result = self::$miner->registerUserDatabase('', '', $database['name'], $database['password']);

		$this->assertNotEmpty($result);

		return $database;
	}

	/**
	 * @depends test_registerUserDatabase_forAnonymous
	 */
	public function test_getDatabasePassword_forAnonymous($database)
	{
		$result = self::$miner->getDatabasePassword('', '', $database['name']);

		$this->assertNotEmpty($result);
		$this->assertEquals($database['password'], $result);
	}

	/**
	 * @depends test_registerUserDatabase_forAnonymous
	 */
	public function test_unregisterUserDatabase_forAnonymous($database)
	{
		$result = self::$miner->unregisterUserDatabase('', '', $database['name']);

		$this->assertNotEmpty($result);
	}

	/**
	 * @depends test_registerUser
	 */
	public function test_deleteUser_byAdmin($user)
	{
		$result = self::$miner->deleteUser(
			$user['username'],
			self::$cfg['admin']['password'],
			self::$cfg['admin']['username']
		);

		$this->assertNotEmpty($result);
	}

	public function test_RegisterUser_and_deleteUser()
	{
		$username = 'testUser2';
		$password = 'pwd2';

		$user = self::$miner->registerUser($username, $password);
		$this->assertNotEmpty($user);

		$result = self::$miner->deleteUser($username, $password);
		$this->assertNotEmpty($result);
	}

	// endregion
}
