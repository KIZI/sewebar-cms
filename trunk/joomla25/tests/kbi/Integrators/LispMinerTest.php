<?php

	require_once dirname(__FILE__).'/../../../www/libraries/kbi/Integrators/LispMiner.php';

/**
 * Test class for Ontopia.
 * Generated by PHPUnit on 2011-02-14 at 09:38:20.
 */
class LispMinerTest extends PHPUnit_Framework_TestCase
{
	protected static $cfg = array(
		'url' => 'http://connect-dev.lmcloud.vse.cz/SewebarConnectNext',
		'params' => array(
			'martix' => 'Loans'
		)
	);

	/**
	 * @var LispMiner
	 */
	protected static $miner;

	/**
	 * @var string
	 */
	protected static $data;

	public static function setUpBeforeClass()
	{
		// Disable FirePHP
		KBIDebug::setEnabled(false);

		self::$data = dirname(__FILE__) . '/../../data';

		$cfg = self::$cfg;

		$tmp = new LispMiner($cfg);

		$minerId = $tmp->register(array(
			'metabase' => 'LM Barbora.mdb',
			'type' => 'AccessConnection'
		));

		$cfg['params']['miner_id'] = $minerId;

		self::$miner = new LispMiner($cfg);

		unset($tmp);
	}

	public static function tearDownAfterClass()
	{
		// Enable back FirePHP
		KBIDebug::setEnabled(true);

		// TODO: solve The process cannot access the file 'results_DD_20130701-10631.xml' because it is being used by another process.'
		// self::$object->unregister();
	}

	public function test_getMethod_shouldBePOST()
	{
	   $this->assertEquals('POST', self::$miner->getMethod());
	}

	public function test_register_withOldData()
	{
		$miner = new LispMiner(self::$cfg);

		$cfg = array(
			'server' => 'db-srv',
			'database' => 'test',
			'username' => 'db_user',
			'password' => 'secret1',
			'type' => 'MySQLConnection'
		);

		$result = $miner->register($cfg);

		$this->assertEquals(22, strlen($result), 'ID should 22 chars');

		return $result;
	}

	/**
	 * @depends test_register_withOldData
	 */
	public function test_unregister($minerId)
	{
		$miner = new LispMiner(self::$cfg);

		$result = $miner->unregister($minerId);

		$this->assertNotEmpty($result);
	}

	public function test_importDataDictionary()
	{
		$data = self::$data;
		$dd = file_get_contents("$data/connect/scenarios/ETreeMiner/Import3.xml");

		$result = self::$miner->importDataDictionary($dd);

		$this->assertContains(self::$miner->getMinerId(), $result, 'Message should contain miner ID.');
	}

	public function test_getDataDescription()
	{
		$result = self::$miner->getDataDescription();

		$this->assertNotEmpty($result, 'Data Description should not be empty.');
	}

	public function test_queryPost_startTask()
	{
		$data = self::$data;
		$query = file_get_contents("$data/connect/scenarios/ETreeMiner/ETReeMiner.Task52.xml");

		$result = self::$miner->queryPost($query, null);

		$this->assertNotEmpty($result);

		return $result;
	}

	/**
	 * @depends test_queryPost_startTask
	 */
	public function test_queryPost_exportResults($r1)
	{
		$result = self::$miner->queryPost(null, array(
			'export' => '9741046ed676ec7470cb043db2881a094e36b554'
		));

		$this->assertXmlStringEqualsXmlString($r1, $result, 'Results should be the same (usually).');
		$this->assertNotEmpty($result);
	}

	public function test_cancelTask()
	{
		$taskName = '9741046ed676ec7470cb043db2881a094e36b554';
		$result = self::$miner->cancelTask($taskName);

		$this->assertContains("Task {$taskName} has been canceled.", $result);
	}

	public function test_test()
	{
		$result = self::$miner->test();

		$this->assertTrue($result, 'Miner should exist.');
	}

	// region SewebarKey

	// TODO

	// endregion
}
