<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gOEfh4DhD4eB4YAHwfCAB8HwwA/D8A==
</value>
  </data>
</root>