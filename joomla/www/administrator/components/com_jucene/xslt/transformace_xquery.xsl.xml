<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
    xmlns:p="http://www.dmg.org/PMML-4_0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exsl="http://exslt.org/common" xmlns:func="http://exslt.org/functions" xmlns:keg="http://keg.vse.cz" xmlns:guha="http://keg.vse.cz/ns/GUHA0.1rev1"
    extension-element-prefixes="func exsl"
    exclude-result-prefixes="p xsi keg guha">
    
    <xsl:output method="xml" encoding="UTF-8" indent="yes"/>
    <xsl:strip-space elements="*"/>
    
    <xsl:template match="/">
        <xsl:element name="PMML">
            <xsl:apply-templates/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:Header">
        <xsl:element name="Header">
            <xsl:attribute name="copyright"><xsl:value-of select="@copyright"/></xsl:attribute>
            <xsl:apply-templates select="p:Extension"/>
            <xsl:apply-templates select="p:Annotation"/>
            <xsl:apply-templates select="p:Timestamp"/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:Extension">
        <xsl:element name="Extension">
            <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
            <xsl:attribute name="value"><xsl:value-of select="@value"/></xsl:attribute>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:Timestamp">
        <xsl:element name="Timestamp">
            <xsl:value-of select="."/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:Annotation">
        <xsl:element name="Annotation">
            <xsl:value-of select="."/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:TransformationDictionary">
        <xsl:element name="fieldValuesSet">
            <xsl:attribute name="fieldCount">
                <xsl:value-of select="count(p:DerivedField)"/>
            </xsl:attribute>
            <xsl:apply-templates select="p:DerivedField"/>
        </xsl:element>        
    </xsl:template>
    
    <xsl:template match="p:DerivedField">
        <xsl:element name="Field">
            <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
            <xsl:attribute name="type"><xsl:value-of select="@optype"/></xsl:attribute>
            <xsl:apply-templates select="p:Discretize/p:DiscretizeBin | p:MapValues/p:InlineTable/p:Extension[@name='Frequency']"/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:DiscretizeBin">
        <xsl:element name="fieldValue">
            <xsl:for-each select="p:Interval">
                <xsl:choose>
                    <xsl:when test="@leftMargin = @rightMargin">
                        <xsl:attribute name="from">
                            <xsl:value-of select="@leftMargin"/>
                        </xsl:attribute>
                    </xsl:when>						    
                    <xsl:otherwise>
                        <xsl:attribute name="from"><xsl:value-of select="@leftMargin"/></xsl:attribute>
                        <xsl:attribute name="to"><xsl:value-of select="@rightMargin"/></xsl:attribute>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:Extension[@name='Frequency']">
        <xsl:element name="fieldValue">
            <xsl:value-of select="@extender"/>
        </xsl:element>           
    </xsl:template>
    
    <xsl:template match="p:DataDictionary"/>
    
    <xsl:template match="guha:AssociationModel">
        <xsl:apply-templates select="AssociationRules/AssociationRule"/>        
    </xsl:template>

    <xsl:template match="AssociationRules/AssociationRule" name="AssociationRule">
        <xsl:element name="AssociationRule">
            <xsl:variable name="ante" select="@antecedent"/>
            <xsl:variable name="cons" select="@consequent"/>
            <xsl:variable name="cond" select="@condition"/>
            <xsl:attribute name="id"><xsl:value-of select="position()"/></xsl:attribute>
            <Text><xsl:value-of select="Text"/></Text>
            <xsl:if test="count($ante)>0">
                <Antecedent>
                    <xsl:call-template name="rekurze">
                        <xsl:with-param name="cedent" select="$ante"/>
                    </xsl:call-template>
                </Antecedent>
            </xsl:if>
            <xsl:if test="count($cons)>0">
                <Consequent>
                    <xsl:call-template name="rekurze">
                        <xsl:with-param name="cedent" select="$cons"/>
                    </xsl:call-template>
                </Consequent>
            </xsl:if>
            <xsl:if test="count($cond)>0">
                <Condition>
                    <xsl:call-template name="rekurze">
                        <xsl:with-param name="cedent" select="$cond"/>
                    </xsl:call-template>
                </Condition>
            </xsl:if>
            <xsl:if test="count(IMValue) > 0">                
                    <xsl:apply-templates select="IMValue"/>                
            </xsl:if>
            <xsl:if test="count(FourFtTable) > 0">                
                <xsl:apply-templates select="FourFtTable"/>                
            </xsl:if>
        </xsl:element>
    </xsl:template>
     
    <xsl:template name="rekurze">
        <xsl:param name="cedent"/>
            <xsl:apply-templates select="../DBA[@id = $cedent] | ../BBA[@id = $cedent]">
                <xsl:with-param name="step" select="1"/>
            </xsl:apply-templates>
    </xsl:template>
    
    <xsl:template match="IMValue">
        <xsl:element name="IMValue">
            <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
            <xsl:value-of select="."/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="FourFtTable">
        <xsl:element name="FourFtTable">
            <xsl:attribute name="a"><xsl:value-of select="@a"/></xsl:attribute>
            <xsl:attribute name="b"><xsl:value-of select="@b"/></xsl:attribute>
            <xsl:attribute name="c"><xsl:value-of select="@c"/></xsl:attribute>
            <xsl:attribute name="d"><xsl:value-of select="@d"/></xsl:attribute>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="DBA">
        <xsl:param name="step"/>
        <xsl:if test="count(BARef) > 0">
            <xsl:choose>
                <xsl:when test="$step = 1">
                        <xsl:apply-templates select="BARef">
                            <xsl:with-param name="connective" select="@connective"/>
                        </xsl:apply-templates>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:element name="DBA">
                        <xsl:attribute name="connective"><xsl:value-of select="@connective"/></xsl:attribute>
                        <!--<xsl:attribute name="id"><xsl:value-of select="@id"/></xsl:attribute>-->
                        <xsl:apply-templates select="BARef">
                            <xsl:with-param name="connective" select="@connective"/>
                        </xsl:apply-templates>
                    </xsl:element>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>
    
    <xsl:template match="BARef">
        <xsl:param name="connective"/>
        <xsl:variable select="text()" name="baref"/>
        <xsl:apply-templates select="../../BBA[@id = $baref] | ../../DBA[@id = $baref]">
            <xsl:with-param name="connective" select="$connective"/>
        </xsl:apply-templates>
    </xsl:template>
    
    <xsl:template match="BBA">
        <xsl:param name="connective"/>
        <xsl:element name="BBA">
            <xsl:variable name="FieldRef"><xsl:value-of select="FieldRef"/></xsl:variable>
            <xsl:variable name="CatRef"><xsl:value-of select="CatRef"/></xsl:variable>
            <xsl:attribute name="id"><xsl:value-of select="@id"/></xsl:attribute>
            <!--<xsl:attribute name="connective"><xsl:value-of select="$connective"/></xsl:attribute>-->
            <xsl:element name="FieldRef"><xsl:value-of select="$FieldRef"/></xsl:element>
            <xsl:element name="CatRef"><xsl:value-of select="$CatRef"/></xsl:element>
            <xsl:apply-templates select="//p:DerivedField[@name = $FieldRef and @optype = 'continuous']" mode="from_rule">
                <xsl:with-param name="CatRef" select="$CatRef"/>
            </xsl:apply-templates>
            <xsl:apply-templates select="//p:MapValues[@outputColumn = $FieldRef]" mode="from_rule">
                <xsl:with-param name="CatRef" select="$CatRef"/>
            </xsl:apply-templates>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:MapValues" mode="from_rule">
        <xsl:param name="CatRef"/>
        <xsl:element name="DDName">
            <xsl:value-of select="p:FieldColumnPair/@column"/>
        </xsl:element>
            <xsl:apply-templates select="p:InlineTable//p:row[p:field/text() = $CatRef]"/>
    </xsl:template>
    
    <xsl:template match="p:DerivedField" mode="from_rule">
        <xsl:param name="CatRef"/>
        <xsl:apply-templates select="p:Discretize/p:DiscretizeBin[@binValue = $CatRef]" mode="from_rule"/>
    </xsl:template>
    
    <xsl:template match="p:row">
        <xsl:element name="DDValue">
            <xsl:value-of select="p:column/text()"/>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="p:DiscretizeBin" mode="from_rule">
        <xsl:variable name="first_closure" select="p:Interval[1]/@closure"/>
        <xsl:variable name="last_closure" select="p:Interval[last()]/@closure"/>
        <xsl:variable name="first_value" select="p:Interval[1]/@leftMargin"/>
        <xsl:variable name="last_value" select="p:Interval[last()]/@rightMargin"/>
        <xsl:element name="DDName">
            <xsl:value-of select="parent::node()/@field"/>
        </xsl:element>
        
        <xsl:element name="Interval">
            <xsl:attribute name="left">
                <xsl:value-of select="$first_value"/>
            </xsl:attribute>
            <xsl:attribute name="right">
                <xsl:value-of select="$last_value"/>
            </xsl:attribute>
            <xsl:attribute name="type">
                <xsl:variable name="first">
                    <xsl:choose>
                        <xsl:when test="$first_closure = 'openClosed' or $first_closure = 'openOpen'">
                            <xsl:value-of select="'open'"/>
                        </xsl:when>
                        <xsl:when test="$first_closure = 'closedClosed' or $first_closure = 'closedOpen'">
                            <xsl:value-of select="'closed'"/>
                        </xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="last">
                    <xsl:choose>
                        <xsl:when test="$last_closure = 'openClosed' or $last_closure = 'closedClosed'">
                            <xsl:value-of select="'Closed'"/>
                        </xsl:when>
                        <xsl:when test="$last_closure = 'closedOpen' or $last_closure = 'openOpen'">
                            <xsl:value-of select="'Open'"/>
                        </xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <xsl:value-of select="concat($first,$last)"/>                
            </xsl:attribute>    
        </xsl:element>
    </xsl:template>
</xsl:stylesheet>